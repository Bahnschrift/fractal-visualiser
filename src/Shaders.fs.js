
export const vsMandel = "\r\n    precision highp float;\r\n    precision highp int;\r\n\r\n    attribute vec4 aVertexPosition;\r\n    attribute vec2 aTextureCoord;\r\n    varying vec2 vTextureCoord;\r\n    void main() {\r\n        gl_Position = aVertexPosition;\r\n        vTextureCoord = aTextureCoord;\r\n    }";

export const fsMandel = "\r\n    precision highp float;\r\n    precision highp int;\r\n    \r\n    varying vec2 vTextureCoord;\r\n    uniform float uZoom;\r\n    uniform float xc;\r\n    uniform float yc;\r\n    uniform float uRatio;\r\n\r\n    const float MAX = 500.;\r\n\r\n    vec3 getPalatte(int index) {\r\n        if (index == 0) { return vec3(66, 30, 15) / 255.; }\r\n        if (index == 1) { return vec3(25, 7, 26) / 255.; }\r\n        if (index == 2) { return vec3(9, 1, 47) / 255.; }\r\n        if (index == 3) { return vec3(4, 4, 73) / 255.; }\r\n        if (index == 4) { return vec3(0, 7, 100) / 255.; }\r\n        if (index == 5) { return vec3(12, 44, 138) / 255.; }\r\n        if (index == 6) { return vec3(24, 82, 177) / 255.; }\r\n        if (index == 7) { return vec3(57, 125, 209) / 255.; }\r\n        if (index == 8) { return vec3(134, 181, 229) / 255.; }\r\n        if (index == 9) { return vec3(211, 236, 248) / 255.; }\r\n        if (index == 10) { return vec3(241, 233, 191) / 255.; }\r\n        if (index == 11) { return vec3(248, 201, 95) / 255.; }\r\n        if (index == 12) { return vec3(255, 170, 0) / 255.; }\r\n        if (index == 13) { return vec3(204, 128, 0) / 255.; }\r\n        if (index == 14) { return vec3(153, 87, 0) / 255.; }\r\n        if (index == 15) { return vec3(106, 52, 3) / 255.; }\r\n    }\r\n\r\n    float mandelbrot(float x, float y) {\r\n        vec2 c = vec2(x, y);\r\n        vec2 z = c;\r\n\r\n        for (int i = 0; i \u003c= int(MAX); i++) {\r\n            if (length(z) \u003e 2.) {\r\n                return float(i);\r\n                // float smoothed = log2(log2(dot(z, z)) / 1.);\r\n                // return sqrt(float(i) + 10. - smoothed) * 2.;\r\n            }\r\n            z = vec2(z.x*z.x - z.y*z.y + c.x, 2.0*z.x*z.y + c.y);\r\n        }\r\n        return MAX;\r\n    }\r\n\r\n    const float SCALE = 2.5;\r\n    float mandelbox(float x, float y) {\r\n        vec2 c = vec2(x, y);\r\n        vec2 z = c;\r\n        \r\n        for (int i = 0; i \u003c= int(MAX); i++) {\r\n            if (length(z) \u003e 400.) {\r\n                return float(i);\r\n            }\r\n\r\n            if (z.x \u003e 1.) {\r\n                z.x = 2. - z.x;\r\n            } else if (z.x \u003c -1.) {\r\n                z.x = -2. - z.x;\r\n            }\r\n            if (z.y \u003e 1.) {\r\n                z.y = 2. - z.y;\r\n            } else if (z.y \u003c -1.) {\r\n                z.y = -2. - z.y;\r\n            }\r\n\r\n            float mag = length(z);\r\n            if (mag \u003c .5) {\r\n                z *= 4.;\r\n            } else if (mag \u003c 1.) {\r\n                z /= mag * mag;\r\n            }\r\n\r\n            z = SCALE * z + c;\r\n        }\r\n\r\n        return 0.;\r\n    }\r\n\r\n    void main() {\r\n        float x = xc + (vTextureCoord.x - 0.5) * uZoom * uRatio;\r\n        float y = yc + (vTextureCoord.y - 0.5) * uZoom;\r\n        float m = mandelbrot(x, y);\r\n\r\n        if (m == MAX) {\r\n            gl_FragColor = vec4(0., 0., 0., 1.);\r\n        } else {\r\n            vec3 col = getPalatte(int(mod(m, 16.)));\r\n            gl_FragColor = vec4(col.x, col.y, col.z, 1.);\r\n        }\r\n    }";

